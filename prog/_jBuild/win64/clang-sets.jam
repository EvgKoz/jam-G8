#  Setup for Clang-CL C/C++ compiler for Win64 (to be included from jBuild.jam)
_OBJ_SUFFIX  = .obj ;

_VC_DIR      = $(_DEVTOOL)/vc2019 ;
VCUpdateVer  = 16.10.3 ;
_CLANG_DIR   = $(_DEVTOOL)/LLVM-$(CLangVer) ;
if ! [ GLOB $(_CLANG_DIR) : * ] { exit FATAL\: \"$(_CLANG_DIR)\" not found! ; }
if $(VCUpdateVer) { _VC_DIR = $(_VC_DIR)_$(VCUpdateVer) ; }
_VC_CRT_TYPE = -MT ;
C_preopt_DirectXVer = jun2010 ;
_WIN_SDK_TARGET_SUFFIX = x64 ;
include $(Root)/prog/_jBuild/_vc/win_sdk.jam ;

if ! [ GLOB $(_VC_DIR) : * ] { exit FATAL\: \"$(_VC_DIR)\" not found!  Please, update it from \\\\FS.GAIJIN.LAN\\Y\\Soft\\forDevelopers\\devtools\\vc2015.7z ; }
if ! [ GLOB $(_WIN_SDK) : * ] { exit FATAL\: \"$(_WIN_SDK)\" not found!  Please, update it from \\\\FS.GAIJIN.LAN\\Y\\Soft\\forDevelopers\\devtools\\$(WinSdkVer).7z ; }
if ! [ GLOB $(_DEVTOOL)/win.sdk.100/Include/10.0.19041.0 : * ] { exit FATAL\: \"$(_DEVTOOL)/win.sdk.100/Include/10.0.19041.0\" not found!  Please, update DEVTOOLS ; }

local _DEF_C_CMDLINE =
  -fms-compatibility-version=19.29.30038.1
  -X /D_TARGET_PC=1 -D_TARGET_PC_WIN=1 /DWIN64 /Dasm=__asm /DWIN32_LEAN_AND_MEAN= /D_USE_MATH_DEFINES
  /DNOMINMAX
  -D_TARGET_SIMD_SSE=$(SSEVersion) -D_TARGET_64BIT=1 -D_ALLOW_KEYWORD_MACROS=
  /D_USING_V110_SDK71_
  -Di_strlen=(int)strlen
  /DDELAYIMP_INSECURE_WRITABLE_HOOKS
  /c /nologo /Zc:forScope /J /Zc:inline
  /Zc:dllexportInlines-
  -Wno-c++11-narrowing
  -Wno-trigraphs
  -Wno-argument-outside-range
  -Wno-nonportable-include-path
  -Wno-ignored-attributes
  -fms-extensions
  -fms-compatibility
  -fdiagnostics-absolute-paths
  -Wno-invalid-offsetof
  -Wno-multichar
  -Wno-unused-function
  -Wno-inconsistent-missing-override
  -Wno-invalid-token-paste
  -Wno-ignored-pragma-intrinsic
  -Wno-pragma-pack
  -Wno-microsoft
  -Wno-int-to-void-pointer-cast
  -Wno-expansion-to-defined
  -Wno-deprecated-declarations
  -Wno-constant-conversion
  -Wno-unused-local-typedef
  -Wno-ignored-pragmas
  -Wno-deprecated-declarations
  -Wno-switch
  -Werror=invalid-noreturn
  -Werror=return-type
  # -Wunused-parameter -Wunused-variable
;

if $(Sanitize) != disabled {
  _DEF_C_CMDLINE += -fsanitize=$(Sanitize) ;
}

if $(SSEVersion) = 4  {
  _DEF_C_CMDLINE += -msse4.1 -mpopcnt ;
} else {
  _DEF_C_CMDLINE += -msse2 ;
}

if $(QtVer) {
  _QT_DIR = $(_DEVTOOL)/Qt-$(QtVer)-vc2008 ;
  if ! [ GLOB $(_QT_DIR) : * ] { exit FATAL\: \"$(_QT_DIR)\" not found!  Please, update it from \\\\FS.GAIJIN.LAN\\Y\\Soft\\forDevelopers\\devtools\\Qt-$(QtVer)-vc2008.7z ; }

  _DEF_C_CMDLINE +=
    -DQT_LARGEFILE_SUPPORT -DQT_THREAD_SUPPORT -DQT_GUI_LIB -DQT_CORE_LIB
    -D_STD_RTL_MEMORY=1
    /Zc:wchar_t-
  ;
  if $(QtVerStatic) = yes { _DEF_C_CMDLINE += -DQT_NODLL ; } else { _VC_CRT_TYPE = -MD ; }

  _QT_MOC = $(_QT_DIR)/bin/moc.exe  ;
  _QT_UIC = $(_QT_DIR)/bin/uic.exe ;
  _QT_RCC = $(_QT_DIR)/bin/rcc.exe ;
} else {
  _DEF_C_CMDLINE += /Zc:wchar_t ;
}

if $(UseWholeOpt) = yes {
  UseLLDLink = yes ;
}

if $(Sanitize) != disabled {
  UseLLDLink = no ; # currently there is false positive for ODR violation on strin literals
}

if $(UseLLDLink) != yes {
  _LINK         = $(_VC_DIR)/bin/Hostx64/x64/link.exe /machine:x64 ;
  _LIB          = $(_VC_DIR)/bin/Hostx64/x64/lib.exe /machine:x64 ;
} else
{
  _LINK         = $(_CLANG_DIR)/bin/lld-link.exe /machine:x64 ; #we have to allow /force:multiple, otherwise it is not linking with effects :(
  _LIB          = $(_CLANG_DIR)/bin/lld-link.exe /lib /machine:x64 ;
}

_C_COMPILER = $(_CLANG_DIR)/bin/clang-cl.exe $(_DEF_C_CMDLINE) ;
_CPP_COMPILER = $(_C_COMPILER) /std:c++$(CPPStd) ;
_ASM_COMPILER = $(_DEVTOOL)/nasm/nasm.exe -f win64 ;
_MASM_COMPILER = $(_VC_DIR)/bin/Hostx64/x64/ml64.exe -c -nologo ;

_RC_COMPILER    = $(_WIN_SDK_BIN)/rc.exe /x /i$(_WIN_SDK_INC) /i$(_VC_DIR)/Include ;
_MT_UTIL        = $(_WIN_SDK_BIN)/mt.exe ;
_CVTRES_EXE     = $(_VC_DIR)/bin/Hostx64/x64/cvtres.exe /MACHINE:x64 /NOLOGO ;
_UM_LIB         = $(_DEVTOOL)/win.sdk.100/Lib/10.0.19041.0/um/x64 ;
_UCRT_LIB       = $(_DEVTOOL)/win.sdk.100/Lib/10.0.19041.0/ucrt/x64 ;
_UCRT_INC       = $(_DEVTOOL)/win.sdk.100/Include/10.0.19041.0/ucrt ;

_INCLUDE = $(_UCRT_INC) $(_WIN_SDK_INC) $(_VC_DIR)/include ;
_LIBPATH = $(_UCRT_LIB) $(_WIN_SDK_LIB) $(_CLANG_DIR)/lib/clang/$(CLangVer)/lib/windows $(_VC_DIR)/lib/x64 $(_UM_LIB) ;

_INCLUDE +=
  $(_QT_DIR)/include/QtCore
  $(_QT_DIR)/include/QtGui
  $(_QT_DIR)/include/ActiveQt
  $(_QT_DIR)/include
  $(_QT_DIR)/mkspecs/win64-msvc2008
;

# make linker cmd-line ###
for lib in $(_LIBPATH) {
  _LINK += -libpath:$(lib) ;
  _LIB += -libpath:$(lib) ;
}

# make compiler cmd-line ###
_C_BASE_INCLUDES   = -imsvc $(_CLANG_DIR)/lib/clang/$(CLangVer)/include -I$(MasterPreInclude) -I$(Root)/prog/dagorInclude -I$(Root)/prog/1stPartyLibs -I$(Root)/prog/3rdPartyLibs ;
_CPP_BASE_INCLUDES = $(_C_BASE_INCLUDES) -I$(Root)/prog/3rdPartyLibs/eastl/include ;

for inc in $(_INCLUDE) {
  _CPP_BASE_INCLUDES += -imsvc $(inc) ;
  _C_BASE_INCLUDES   += -imsvc $(inc) ;
  _DEP_COMPILER += --x$(inc) ;
}

_DEF_C_CMDLINE = ;
