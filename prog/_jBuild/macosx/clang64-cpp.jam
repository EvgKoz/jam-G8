#  to be included in jBuild.jam

rule ProcessCompileTarget
{
  #  basic opts: warning/remark suppressing, additional includes etc.
  local _SUPPRESS_OPT = ;
  local _CONFIG_OPT = ;
  local pre_opt = ;

  if $(StrictCompile) = yes
  {
  }
  else
  {
  }

  switch $(Config) {
    case dev :
      _CONFIG_OPT = -DDAGOR_DBGLEVEL=1 ;
      if $(CheckOnly) = yes { _CONFIG_OPT += -O0 ; } else { _CONFIG_OPT += -O3 ; }
    case rel :
      _CONFIG_OPT = -DDAGOR_DBGLEVEL=0 -O3 -DNDEBUG=1 ;
    case irel :
      _CONFIG_OPT = -DDAGOR_DBGLEVEL=-1 -O3 -DNDEBUG=1 ;
    case dbg :
      _CONFIG_OPT = -DDAGOR_DBGLEVEL=2 ;
    case * :
      _CONFIG_OPT = ;
  }
  if $(CheckOnly) != yes { _CONFIG_OPT += -g1 -gdwarf-2 ; }

  _CPP_OPT = "-I "$(AddIncludes) $(_CONFIG_OPT) $(_SUPPRESS_OPT) $(CPPopt) $(GlobalCPPopt) ;

  $(Target)__CPP_OPT = -include memory/dag_memBase.h $(_CPP_OPT) ;
  $(Target)__C_OPT   = $(Copt) $(_CPP_OPT) ;
  $(Target)__PRE_OPT = $(pre_opt) ;
  $(Target)__ASM_OPT = -I$(AddIncludes) $(ASMopt) ;
}


rule DepRule
{
  local changed_dep = ;

  # add $(Root) prefix when needed
  for dep in $(>)
  {
    local rel_path = ;
    switch $(dep)
    {
      case $(_DEVTOOL)/mac/SDK* : dep = ; # skip target part
      case *: : dep = ; # skip target part
      case /* : changed_dep += $(dep) ;   # absolute path with drive
      case *  : rel_path = [ MATCH "[\.\\\/]*([^ \
               ]+)" : $(dep) ] ; # relative path, add $(Root) prefix
    }
    if $(rel_path) { changed_dep += $(Root)/$(rel_path) ; }
  }

  Includes $(<) : $(changed_dep) ;
  null_action $(changed_dep) ;
}


rule CheckHeaders
{
  Depends $(<) : $(>) ;
  NoCare $(>) ; # tolerant to .d absence
  NOUPDATE $(>) ; # tolerant to .d timestamp

  # scan line for header, skipping any ../ at the beginning [will be prefixed with $(Root)]
  HDRSCAN  on $(>) = "[ 
                      ]*([^ \\\
                      ]+)[ \\\
                      ]" ;
  HDRRULE  on $(>) = DepRule ;
  HDRFS    on $(>) = yes ;
}


actions together quietly compile_cpp
{
#async
  echo $(2:G=:D=)
  call $(_CPP_COMPILER) $(pre_opt) $(_CPP_BASE_INCLUDES) $(cpp_opt) -o $(1) $(2:G=)
  if errorlevel 1 goto failed
  if not exist $(1) goto failed
  if not exist $(1:S=.d) goto failed
  goto end
  :failed
  set ERRORLEVEL=13
  :end
}

actions together quietly compile_c
{
#async
  echo $(2:G=:D=)
  call $(_C_COMPILER) $(pre_opt) $(_C_BASE_INCLUDES) $(c_opt) -o $(1) $(2)
  if errorlevel 1 goto failed
  if not exist $(1) goto failed
  if not exist $(1:S=.d) goto failed
  goto end
  :failed
  set ERRORLEVEL=13
  :end
}

actions together quietly compile_obj_c
{
#async
  echo $(2:G=:D=)
  call $(_OBJC_COMPILER) $(pre_opt) $(_C_BASE_INCLUDES) $(c_opt) -o $(1) $(2)
  if errorlevel 1 goto failed
  if not exist $(1) goto failed
  if not exist $(1:S=.d) goto failed
  goto end
  :failed
  set ERRORLEVEL=13
  :end
}

actions together quietly compile_obj_cpp
{
#async
  echo $(2:G=:D=)
  call $(_OBJCPP_COMPILER) $(pre_opt) $(_CPP_BASE_INCLUDES) $(c_opt) -include memory/dag_memBase.h -o $(1) $(2)
  if errorlevel 1 goto failed
  if not exist $(1) goto failed
  if not exist $(1:S=.d) goto failed
  goto end
  :failed
  set ERRORLEVEL=13
  :end
}
