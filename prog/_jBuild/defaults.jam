if ! $(__DEFAULTS_INCLUDED) {
  if $(JAMVERSION) != 2.5-G8 {
    Exit Jam 2.5-G8 required (found: $(JAMVERSION))! Please, update. ;
  }
  __DEFAULTS_INCLUDED = 1 ;

  Root      ?= ./ ;

  include $(Root)/prog/_jBuild/defPlatform.jam ;

  PlatformSpec_$(Platform) ?= $(PlatformSpec_$(Platform)_$(PlatformArch)) ;
  PlatformSpec_windows ?= vc16 ;
  PlatformSpec_macOS ?= clang ;
  PlatformSpec_linux ?= gcc ;
  CLangVer ?= 15.0.7 ;
  DefaultCPPStd = 17 ;
  CPPStd ?= 17 ;
  Sanitize ?= disabled ;
  NoMemBaseInclude ?= no ;

  PlatformSpec ?= $(PlatformSpec_$(Platform)) ;
  switch $(PlatformSpec) {
    case vc17 : VCUpdateVer ?= 17.9.5 ;
    case vc16 : VCUpdateVer ?= 16.11.34 ;
    case vc15 : VCUpdateVer ?= 15.9.5 ;
    case * :    VCUpdateVer ?= 3 ;
  }

  if $(PlatformSpec) = clang {
    IncludeSystemDir ?= -isystem ;
    IncludeMSVCDir ?= -imsvc ;
  }

  IncludeSystemDir ?= -I ;
  IncludeMSVCDir ?= -I ;

  Config        ?= dev ;
  KernelLinkage ?= static ;
  MacOSXVer     ?= 11.0 ;
  MacOSXMinVer  ?= $(MacOSXVer) ;
  WinSdkVer     ?= win.sdk.100 ;
  UseD3DMulti   ?= no ;
  MSVectorcall  ?= no ;
  ForceLogs     ?= no ;
  UseLtoJobs    ?= 0 ;
  CheckOnly     ?= no ;
  ForcePdb      ?= no ;
  BundleVersion ?= 1.0.0 ;
  DbgDigest     ?= once ;  # once, min, max, stop

  if ! $(Platform) in windows { DisableUsingPCH ?= yes ; }

  if $(Config) = dbg {
    CheckedContainers ?= yes ;
    StackProtection ?= yes ;
  } else if $(Config) in rel irel {
    CheckedContainers = no ;
    StackProtection ?= no ;
  } else {
    CheckedContainers ?= no ;
    StackProtection ?= yes ;
  }
  if $(Sanitize) = address {
    StackProtection = no ;
  }

  if $(Platform) in macOS { SSEVersion = ; } # use only default SSEVersion for these platforms
  if $(Platform) in macOS || $(Platform)-$(PlatformArch) = windows-x86_64 {
    SSEVersion ?= 4 ;
  }
  SSEVersion ?= 2 ;
  VCMathOption ?= -fp:fast ;

  if $(FullOOPEnabled) = yes {
    Exceptions ?= yes ;
    CatchSEH ?= yes ;
    Rtti ?= yes ;
  } else if $(Config) in dbg dev {
    Exceptions ?= yes ;
    CatchSEH ?= no ;
    Rtti ?= no ;
  } else {
    Exceptions ?= no ;
    CatchSEH ?= no ;
    Rtti ?= no ;
  }
  
  UseWholeOpt ?= no ;

  if $(OS) = MACOSX {
    if ! $(_DEVTOOL) && [ GLOB /devtools : * ] { _DEVTOOL = /devtools ; }
    if ! $(_DEVTOOL) && [ GLOB /var/devtools : * ] { _DEVTOOL = /var/devtools ; }
    _DEVTOOL ?= $(HOME)/devtools ;
    XcodeVER ?= Xcode ;

    if ! [ GLOB $(_DEVTOOL)/mac : * ] || mkdevtools in $(JAMTARGETS) {
      if ! mkdevtools in $(JAMTARGETS) { echo NOTICE\: \"$(_DEVTOOL)/mac/\" not found, trying to construct it ; }

      if [ GLOB /Applications/$(XcodeVER).app/Contents/Developer/usr/bin : * ] {
        echo Found Xcode at /Applications/$(XcodeVER).app/Contents/Developer ;
        GLOBAL_BuildDevtool = build_devtool_macosx_xcode ;
      } else {
        exit FATAL\: Failed to find Xcode path ;
      }
    }

    include $(Root)/prog/_jBuild/macOS/setup-ver.jam ;
  }
  if $(OS) = LINUX {
    GDEVTOOL ?= $(HOME)/devtools ;
  }

  if ! $(_DEVTOOL) && ! $(GDEVTOOL) { 
    EXIT 'GDEVTOOL' (or '_DEVTOOL') env-variable must be defined (in UPPERCASE!), aborting ; 
  }
  _DEVTOOL ?= $(GDEVTOOL) ;
  # construct _DEVTOOL_RE compatible with regexp syntax
  local split = [ MATCH "([^\\\/]*)([\\\/])(.*)" : $(_DEVTOOL) ] ;
  _DEVTOOL_RE = $(split[1]) ;
  local _devtool_s = $(_DEVTOOL_RE) ;

  while $(split[2])
  {
    local next_split = [ MATCH "([^\\\/]*)([\\\/])(.*)" : $(split[3]) ] ;
    if $(next_split[2])
    {
      _DEVTOOL_RE = $(_DEVTOOL_RE)[\\\\\\\/]$(next_split[1]) ;
      _devtool_s = $(_devtool_s)/$(next_split[1]) ;
      split = $(next_split) ;
    }
    else
    {
      _DEVTOOL_RE = $(_DEVTOOL_RE)[\\\\\\\/]$(split[3]) ;
      _devtool_s = $(_devtool_s)/$(split[3]) ;
      break ;
    }
  }
  _DEVTOOL_RE ?= $(_DEVTOOL) ;
  _DEVTOOL = $(_devtool_s) ;
  if $(GDEVTOOL) { GDEVTOOL = $(_devtool_s) ; }

  if $(GOUT_ROOT) {
    local slashes = [ MATCH "(.*[\\])" : $(GOUT_ROOT) ] ;
    if $(slashes) { exit GOUT_ROOT\=$(GOUT_ROOT) must not contain '\\' slashes! ; }
    _OutputRoot = $(GOUT_ROOT) ;
  } else {
    _OutputRoot = $(Root)/_output ;
  }

  # mangle target name (based on Config and Platform);
  #   params: ( target )
  rule MangleTargetName
  {
    # list of target types that will use mangling target name
    local _MangledTargetTypes =
      exe
      dll
    ;

    local target = $(1:B)$(1:S) ;

    if ! $(TargetType) in $(_MangledTargetTypes) {
      return $(target) ;
    }

    if $(Sanitize) != disabled {
      local address = asan ;
      local thread = tsan ;
      local leak = lsan ;
      local undefined = ubsan ;
      target = $(target:B)-$($(Sanitize))$(target:S) ;
    }

    if $(Config) != rel {
      target = $(target:B)-$(Config)$(target:S) ;
    }

    return $(target) ;
  }
  rule AutoCompleteTargetName
  {
    local type = $(2) ;
    type ?= $(TargetType) ;
    if $(1:S) { return $(1) ; }
    if $(type) = exe {
      if $(Platform) in windows { return $(1).exe ; }
    } else if $(type) = dll {
      if $(Platform) in windows { return $(1).dll ; }
      if $(Platform) in macOS {
        if macOS-shortform in $(3) { return $(1:S=.dylib) ; }
        if $(1:D) { return $(1:D)/lib$(1:D=:S=.dylib) ; } else { return lib$(1:D=:S=.dylib) ; }
      }
      if $(Platform) in linux { if $(1:D) { return $(1:D)/lib$(1:D=:S=.so) ; } else { return lib$(1:D=:S=.so) ; } }
    }
    return $(1) ;
  }
  rule MakeEffectiveTarget
  {
    local type = $(2) ;
    type ?= $(TargetType) ;
    if ! $(type) in exe dll { return $(1) ; }
    return [ AutoCompleteTargetName [ MangleTargetName $(1) ] : $(type) ] ;
  }

  rule SetupOutputDir
  {
    local _platform = $(Platform) ;
    local _platform_spec = $(PlatformSpec) ;

    if $(PlatformSpec) in vc14 vc14 vc15 vc16 vc17 && $(VCUpdateVer) {
      _platform_spec = $(_platform_spec)-$(VCUpdateVer) ;
    } else if $(PlatformSpec) = clang && $(Platform) in windows {
      _platform_spec = $(_platform_spec)-$(CLangVer) ;
    }
    if $(PlatformOutputDir) { _platform_spec = $(PlatformOutputDir) ; }

    if $(Platform) = macOS {
      _platform = $(_platform)-$(MacOSXVer)~m$(MacOSXMinVer) ;
      if $(PlatformArch) = arm64 {
        local ver = [ MATCH "([^\.]+)\.(.+)" : $(MacOSXMinVer) ] ;
        if ! $(ver[0]) || ! $(ver[0]) in 11 12 13 14 15 { Exit PlatformArch=$(PlatformArch) requires MacOSXMinVer 11+ ($(MacOSXMinVer) is not allowed) ; }
      }
    } else if $(Platform) in windows {
      local ver = [ MATCH "([^\.]+)\.([^\.]+)\.(.*)" : $(WinSdkVer) ] ;
      if ! $(ver[3] { ver = [ MATCH "([^\.]+)\.(.*)" : $(WinSdkVer) ] ; }
      if ( ! $(ver[2]) ) || ( ! $(ver[1]) in win win32 ) { Exit bad WinSdkVer\=$(WinSdkVer) ; }
      if $(ver[2]) = sdk && $(ver[3]) { ver = $(ver[3]) ; } else { ver = $(ver[2-]:J) ; }
      _platform = $(_platform)-$(ver) ;
    }

    local out = $(_platform)~$(PlatformArch)~$(Config)~$(_platform_spec) ;

    if $(CPPStd) != $(DefaultCPPStd) {
      out = $(out)~cpp$(CPPStd) ;
    }

    if $(Platform) in windows linux macOS && $(UseD3DMulti) = yes {
      if ! -D_TARGET_D3D_MULTI in $(GlobalCPPopt) { GlobalCPPopt += -D_TARGET_D3D_MULTI ; }
      out = $(out)~m ;
    }

    if $(MSVectorcall) = yes && $(PlatformArch) = x86_64 && $(Platform) in windows {
      out = $(out)~v ;
    }

    if $(KernelLinkage) = dynamic {
      out = $(out)~krnlimp ;
    }

    if $(Platform) in windows macOS linux {
      out = $(out)~s$(SSEVersion) ;
    }
    if $(Platform) in windows {
      switch $(VCMathOption) {
        case -fp:fast : # default choice and output name
        case -fp:precise : out = $(out)~fp ;
        case -fp:strict :  out = $(out)~fs ;
        case * : Exit Unsupported VCMathOption\=$(VCMathOption) ;
      }
    }
    if $(ForceLogs) = yes {
      if $(Config) != rel { Exit why set ForceLogs=$(ForceLogs) for Config=$(Config) \!\= rel  ?? ; }
      if ! -DDAGOR_FORCE_LOGS=1 in $(GlobalCPPopt) { GlobalCPPopt += -DDAGOR_FORCE_LOGS=1 ; }
      out = $(out)~log ;
    }
    if $(Exceptions) != no {
      out = $(out)~ex ;
      if $(CatchSEH) = yes {
        out = $(out)s ;
      }
    }
    if $(Rtti) != no {
      out = $(out)~rtti ;
    }
    if $(Sanitize) != disabled {
      out = $(out)~san-$(Sanitize) ;
    }
    if $(CxxStdLib) = libc++ {
      out = $(out)~libcxx ;
    }
    if $(OutputSuffix) {
      out = $(out)~$(OutputSuffix) ;
    }
    if $(UseLtoJobs) != 0 {
      out = $(out)~lto ;
    }
    if $(CheckedContainers) = yes {
      local defines = -D_DEBUG_TAB_ ;
      for d in $(defines) { if ! $(d) in $(GlobalCPPopt) { GlobalCPPopt += $(d) ; } }
      out = $(out)~c ;
    }
    if $(StackProtection) = no && $(Sanitize) != address {
      out = $(out)~nosp ;
    }
    if $(CheckOnly) = yes {
      out = $(out)~co ;
    }

    if $(NoMemBaseInclude) = yes {
      if ! -D__B_NO_MEM_BASE_INCLUDE in $(GlobalCPPopt) { GlobalCPPopt += -D__B_NO_MEM_BASE_INCLUDE ; }
      out = $(out)~nmb ;
    }

    if $(UseWholeOpt) != no {
      out = $(out)~who ;
    }

    if $(Analyze) = yes { out = $(out)~a ; }

    _Output   = $(_OutputRoot)/$(out) ;
    _PrintedOutput   = [$(out)] ;
  }

  SetupOutputDir ;

  if ( clean in $(JAMTARGETS) ) || ( this in $(JAMTARGETS) ) { GLOBAL_OmitDependencies = 1 ; }
  if cache in $(JAMTARGETS) { GLOBAL_CacheDryRun = 1 ; }
  if clean in $(JAMTARGETS) { GLOBAL_CleanObj = clean ; }
  else if clean_all in $(JAMTARGETS) { GLOBAL_CleanObj = clean_all ; }


  # prepare command line to call another jam (used in some rules)
  if $(OS) = NT {
    if ! $(ComSpec) { Exit Neither ComSpec, nor COMSPEC env var found ; }
    JAM_EXE = $(ComSpec) /C jam.exe ;
  } else if $(OS) in MACOSX LINUX {
    JAM_EXE = jam ;
  }

  include $(Root)/prog/_jBuild/jCommonRules.jam ;
  NotFile ALL_CODEGEN_TARGET ;
}
